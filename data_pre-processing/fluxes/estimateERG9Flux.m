%% Estimate the remaining ERG9b flux
% This script estimates the ERG9b flux of the pathway using outputs
% generated by the scripts 'processData' and 'modelFVA'. It employs the
% flux SQLS of the constraints-based model as reference

% It uses as inputs: 
% - DilutionRatesStatistics: estimated dilution rates of the chemostat
% cultivations
% - FluxesBiomassStatistics: estimated fluxes per biomass of the
% metabolites included in the model
% - FVAEstimatedResults: Results of relevant fluxes that were not measured
% and belong to the mevalonate pathway, synthesis of carotenoids or the
% beginning of the sterol pathway
% - DensityMeanStd: Assumed mean density and its std of yeast cells
% - MoistWeightConversion: Assumed mean moisture content and its std of
% yeast cells

% It generates the following outputs in the 'output' folder:
% - ERG9BiomassStatistics: estimated flux per biomass of ERG9b
% - ERG9VolumeStatistics: estimated flux per volume of ERG9b

%% Clean variables and close windows
clear, close all
rng('default');                 % for reproducibility
format longE

%% Import Data to be used and define variables

DilutionRatesTable = readtable('output\DilutionRatesStatistics.xlsx');
FVAEstimatedResultsTable = readtable('output\FVAEstimatedResults.xlsx','Sheet','SQLS');
DensityTable = readtable('..\..\biomass_and_metabolites_data\DensityMeanStd.xlsx','Sheet','Data');
MoistWeightConversionTable = readtable('..\..\biomass_and_metabolites_data\MoistWeightConversion.xlsx','Sheet','Data');


strainConditions = {'2D01';'2D025';'3D01';'3D025';'4D01';'4D025'};          % names of the chemostat cultivations

alpha = 0.05;                                                               % significance to estimate confidence intervals
simulationN = 1e7;                                                          % number of samples to be used in the Monte Carlo simulation

%% Calculate transformation coeff from Dilution Rate to SQLS

dilutionRatesMean = DilutionRatesTable{:,2};
dilutionRatesSE = DilutionRatesTable{:,3};
dilutionRatesDF = DilutionRatesTable{:,5};

dilutionRatesT = tinv(1-alpha/2,dilutionRatesDF);
dilutionRatesLCI = dilutionRatesMean-dilutionRatesSE.*dilutionRatesT;
dilutionRatesUCI = dilutionRatesMean+dilutionRatesSE.*dilutionRatesT;

sqlsLCI = FVAEstimatedResultsTable{:,3};
sqlsMean = FVAEstimatedResultsTable{:,4};
sqlsUCI = FVAEstimatedResultsTable{:,4};

transformationCoeffs = sqlsMean./dilutionRatesMean;

%% Simulate Data for Dilution Rate and transform it to ERG9 flux

% Obtain parameters and their distributions for volume fluxes
densityMean = DensityTable{1,1};
densitySD = DensityTable{1,2};
moistWeightConversionMean = MoistWeightConversionTable{1,1};
moistWeightConversionSD = MoistWeightConversionTable{1,2};

densityDistribution = normrnd(densityMean,densitySD,1,simulationN);
moistWeightConversionDistribution = normrnd(moistWeightConversionMean,moistWeightConversionSD,1,simulationN);

erg9BiomassMean = zeros(length(strainConditions),1);
erg9BiomassSE = zeros(length(strainConditions),1);
erg9BiomassLCI = zeros(length(strainConditions),1);
erg9BiomassUCI = zeros(length(strainConditions),1);

erg9VolumeMean = zeros(length(strainConditions),1);
erg9VolumeSE = zeros(length(strainConditions),1);
erg9VolumeLCI = zeros(length(strainConditions),1);
erg9VolumeUCI = zeros(length(strainConditions),1);
erg9VolumeMeanGRASP = zeros(length(strainConditions),1);
erg9VolumeStdGRASP = zeros(length(strainConditions),1);


for i = 1:length(strainConditions)
    dilutionRateDistribution = dilutionRatesMean(i,:) + trnd(dilutionRatesDF(i,:),1,simulationN).*dilutionRatesSE(i,:);
    erg9BiomassDistribution = dilutionRateDistribution.*transformationCoeffs(i,:);

    erg9BiomassMean(i,:) = mean(erg9BiomassDistribution);
    erg9BiomassSE(i,:) = std(erg9BiomassDistribution,1);
    erg9BiomassLCI(i,:) = prctile(erg9BiomassDistribution,100*alpha/2);
    erg9BiomassUCI(i,:) = prctile(erg9BiomassDistribution,100*(1-alpha/2));

    erg9VolumeDistribution = erg9BiomassDistribution.*densityDistribution*1000./moistWeightConversionDistribution;

    erg9VolumeMean(i,:) = mean(erg9VolumeDistribution);
    erg9VolumeSE(i,:) = std(erg9VolumeDistribution,1);
    erg9VolumeLCI(i,:) = prctile(erg9VolumeDistribution,100*alpha/2);
    erg9VolumeUCI(i,:) = prctile(erg9VolumeDistribution,100*(1-alpha/2));
    erg9VolumeMeanGRASP(i,:) = (erg9VolumeUCI(i,1) + erg9VolumeLCI(i,1))./2;
    erg9VolumeStdGRASP(i,:) = (erg9VolumeUCI(i,1) - erg9VolumeLCI(i,1))./4;
end


erg9BiomassTable = table(strainConditions,erg9BiomassMean,erg9BiomassSE,erg9BiomassLCI,erg9BiomassUCI);
erg9BiomassTable = renamevars(erg9BiomassTable,["strainConditions","erg9BiomassMean","erg9BiomassSE","erg9BiomassLCI","erg9BiomassUCI"],["StrainCondition","Mean [mmol/gDCWh]","SE [mmol/gDCWh]","Lower CI 95% [mmol/gDCWh]","Upper CI 95% [mmol/gDCWh]"]);
writetable(erg9BiomassTable,'output\ERG9BiomassStatistics.xlsx','Sheet','ERG9');

erg9VolumeTable = table(strainConditions,erg9VolumeMean,erg9VolumeSE,erg9VolumeLCI,erg9VolumeUCI,erg9VolumeMeanGRASP,erg9VolumeStdGRASP);
erg9VolumeTable = renamevars(erg9VolumeTable,["strainConditions","erg9VolumeMean","erg9VolumeSE","erg9VolumeLCI","erg9VolumeUCI","erg9VolumeMeanGRASP","erg9VolumeStdGRASP"],["StrainCondition","Mean [mmol/Lh]","SE [mmol/Lh]","Lower 95% CI [mmol/Lh]","Upper 95% CI [mmol/Lh]","Mean for GRASP  [mmol/Lh]","SD for GRASP [mmol/Lh]"]);
writetable(erg9VolumeTable,'output\ERG9VolumeStatistics.xlsx','Sheet','ERG9');
